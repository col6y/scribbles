#lang typed/racket
(require "utils.rkt")
(require "vector.rkt")
(require "functional-graphics.rkt")
(require "saving.rkt")

(provide body-merge GetVectors SetVectorRef UpdateAndRender Body body-new body-get body-set! body-update-and-render! body-save)

(define-type GetVectors (-> (Listof Vector2D)))
(define-type SetVectorRef (-> Nonnegative-Integer Vector2D Void))
(define-type UpdateAndRender (-> Renderer))
(define-type SaveFunc (-> Encoded))
(define-type Body body-struct)

(struct body-struct ([get : GetVectors] [set! : SetVectorRef] [update-and-render! : UpdateAndRender] [save : SaveFunc]))

(: body-new (-> GetVectors SetVectorRef UpdateAndRender SaveFunc Body))
(define (body-new get set! update-and-render! save)
  (body-struct get set! update-and-render! save))

(: body-get (-> Body (Listof Vector2D)))
(define (body-get body)
  ((body-struct-get body)))

(: body-set! (-> Body Nonnegative-Integer Vector2D Void))
(define (body-set! body i vec)
  ((body-struct-set! body) i vec))

(: body-update-and-render! (-> Body Renderer))
(define (body-update-and-render! body)
  ((body-struct-update-and-render! body)))

(: body-save (-> Body Encoded))
(define (body-save body)
  ((body-struct-save body)))

(: body-merge (-> (-> (Listof Body)) SaveFunc Body))
(define (body-merge bodies save)
  (: lengths (Listof Nonnegative-Integer))
  (define lengths empty)
  (: get GetVectors)
  (define (get)
    (let ((vectors : (Listof (Listof Vector2D)) (map body-get (bodies))))
      (set! lengths (map (inst length Vector2D) vectors))
      (append* vectors)))
  (: set-i! (-> Nonnegative-Integer Vector2D (Listof Nonnegative-Integer) (Listof Body) Void))
  (define (set-i! i vec lens bodies)
    (if (empty? lens)
        (error "set! index out of range!")
        (let* ((first (car lens))
               (delta (- i first)))
          (if (< delta 0)
              (body-set! (car bodies) i vec)
              (set-i! delta vec (cdr lens) (cdr bodies))))))
  (: set SetVectorRef)
  (define (set i vec)
    (let ((lens lengths))
      (set-i! i vec lengths (bodies))))
  (: update-and-render! UpdateAndRender)
  (define (update-and-render!)
    (apply r:all (map body-update-and-render! (bodies))))
  (body-new get set update-and-render! save))
